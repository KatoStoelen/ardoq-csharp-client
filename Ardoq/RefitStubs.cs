﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Threading.Tasks;
using Ardoq.Models;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIAttachmentService : IAttachmentService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIAttachmentService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Attachment> UploadAttachment(string resourceId,Stream attachment,string org,string resourceType)
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }

        public virtual Task DeleteAttachment(string resourceId,string filename,string org,string resourceType)
        {
            var arguments = new object[] { resourceId,filename,org,resourceType };
            return (Task) methodImpls["DeleteAttachment"](Client, arguments);
        }

        public virtual Task<Stream> DownloadAttachment(string resourceId,string filename,string org,string resourceType)
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }

        public virtual Task<List<Attachment>> GetAttachments(string resourceId,string org,string resourceType)
        {
            var arguments = new object[] { resourceId,org,resourceType };
            return (Task<List<Attachment>>) methodImpls["GetAttachments"](Client, arguments);
        }

    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIComponentService : IComponentService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIComponentService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Component>> GetAllComponents(string org)
        {
            var arguments = new object[] { org };
            return (Task<List<Component>>) methodImpls["GetAllComponents"](Client, arguments);
        }

        public virtual Task<Component> GetComponentById(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<Component>) methodImpls["GetComponentById"](Client, arguments);
        }

        public virtual Task<Component> CreateComponent(Component component,string org)
        {
            var arguments = new object[] { component,org };
            return (Task<Component>) methodImpls["CreateComponent"](Client, arguments);
        }

        public virtual Task<Component> UpdateComponent(String id,Component component,string org)
        {
            var arguments = new object[] { id,component,org };
            return (Task<Component>) methodImpls["UpdateComponent"](Client, arguments);
        }

        public virtual Task DeleteComponent(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task) methodImpls["DeleteComponent"](Client, arguments);
        }

        public virtual Task<List<Component>> FieldSearch(String name,string fieldquery,string org)
        {
            var arguments = new object[] { name,fieldquery,org };
            return (Task<List<Component>>) methodImpls["FieldSearch"](Client, arguments);
        }

    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIDeprecatedModelService : IDeprecatedModelService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIDeprecatedModelService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Model>> GetAllModels(string org)
        {
            var arguments = new object[] { org };
            return (Task<List<Model>>) methodImpls["GetAllModels"](Client, arguments);
        }

        public virtual Task<Model> GetModelById(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<Model>) methodImpls["GetModelById"](Client, arguments);
        }

    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIFieldService : IFieldService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIFieldService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Field>> GetAllFields(string org)
        {
            var arguments = new object[] { org };
            return (Task<List<Field>>) methodImpls["GetAllFields"](Client, arguments);
        }

        public virtual Task<Field> GetFieldById(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<Field>) methodImpls["GetFieldById"](Client, arguments);
        }

        public virtual Task<Field> CreateField(Field field,string org)
        {
            var arguments = new object[] { field,org };
            return (Task<Field>) methodImpls["CreateField"](Client, arguments);
        }

        public virtual Task<Field> UpdateField(String id,Field field,string org)
        {
            var arguments = new object[] { id,field,org };
            return (Task<Field>) methodImpls["UpdateField"](Client, arguments);
        }

        public virtual Task DeleteField(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task) methodImpls["DeleteField"](Client, arguments);
        }

    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIReferenceService : IReferenceService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Reference>> GetAllReferences(string org)
        {
            var arguments = new object[] { org };
            return (Task<List<Reference>>) methodImpls["GetAllReferences"](Client, arguments);
        }

        public virtual Task<Reference> GetReferenceById(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<Reference>) methodImpls["GetReferenceById"](Client, arguments);
        }

        public virtual Task<Reference> CreateReference(Reference reference,string org)
        {
            var arguments = new object[] { reference,org };
            return (Task<Reference>) methodImpls["CreateReference"](Client, arguments);
        }

        public virtual Task<Reference> UpdateReference(String id,Reference reference,string org)
        {
            var arguments = new object[] { id,reference,org };
            return (Task<Reference>) methodImpls["UpdateReference"](Client, arguments);
        }

        public virtual Task DeleteReference(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task) methodImpls["DeleteReference"](Client, arguments);
        }

    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedITagService : ITagService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedITagService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Tag>> GetAllTags(string org)
        {
            var arguments = new object[] { org };
            return (Task<List<Tag>>) methodImpls["GetAllTags"](Client, arguments);
        }

        public virtual Task<Tag> GetTagById(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<Tag>) methodImpls["GetTagById"](Client, arguments);
        }

        public virtual Task<Tag> CreateTag(Tag tag,string org)
        {
            var arguments = new object[] { tag,org };
            return (Task<Tag>) methodImpls["CreateTag"](Client, arguments);
        }

        public virtual Task<Tag> UpdateTag(String id,Tag tag,string org)
        {
            var arguments = new object[] { id,tag,org };
            return (Task<Tag>) methodImpls["UpdateTag"](Client, arguments);
        }

        public virtual Task DeleteTag(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task) methodImpls["DeleteTag"](Client, arguments);
        }

    }
}

namespace Ardoq.Service.Interface
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIWorkspaceService : IWorkspaceService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIWorkspaceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Workspace>> GetAllWorkspaces(string org)
        {
            var arguments = new object[] { org };
            return (Task<List<Workspace>>) methodImpls["GetAllWorkspaces"](Client, arguments);
        }

        public virtual Task<Workspace> GetWorkspaceById(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<Workspace>) methodImpls["GetWorkspaceById"](Client, arguments);
        }

        public virtual Task<List<WorkspaceBranch>> GetBranches(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<List<WorkspaceBranch>>) methodImpls["GetBranches"](Client, arguments);
        }

        public virtual Task<AggregatedWorkspace> GetAggregatedWorkspace(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task<AggregatedWorkspace>) methodImpls["GetAggregatedWorkspace"](Client, arguments);
        }

        public virtual Task<Workspace> CreateWorkspace(Workspace workspace,string org)
        {
            var arguments = new object[] { workspace,org };
            return (Task<Workspace>) methodImpls["CreateWorkspace"](Client, arguments);
        }

        public virtual Task<Workspace> BranchWorkspace(String id,WorkspaceBranchRequest branch,string org)
        {
            var arguments = new object[] { id,branch,org };
            return (Task<Workspace>) methodImpls["BranchWorkspace"](Client, arguments);
        }

        public virtual Task<Workspace> UpdateWorkspace(String id,Workspace workspace,string org)
        {
            var arguments = new object[] { id,workspace,org };
            return (Task<Workspace>) methodImpls["UpdateWorkspace"](Client, arguments);
        }

        public virtual Task DeleteWorkspace(String id,string org)
        {
            var arguments = new object[] { id,org };
            return (Task) methodImpls["DeleteWorkspace"](Client, arguments);
        }

    }
}


